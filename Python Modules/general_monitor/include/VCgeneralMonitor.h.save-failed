#ifndef _VC_GENERAL_MONITOR_H
#define _VCgeneralMonitor_H
//stl
#include <string>
#include <vector>
//
#include "controller.h"
#include "structs.h"
#include "gmStructs.h"

#include <boost/python/detail/wrap_python.hpp>
#include <boost/python.hpp>
#include <boost/python/suite/indexing/vector_indexing_suite.hpp>
#include <boost/python/suite/indexing/map_indexing_suite.hpp>
#include <boost/python/return_value_policy.hpp>


class VCgeneralMonitor : public controller// inherits controller for messaging
{
    public:
        VCgeneralMonitor(const bool shouldShowMessage = false,const bool  shouldShowDebugMessage= false );
        ~VCgeneralMonitor();
        // should be base class functions?
        void setQuiet();
        void setVerbose();
        void setMessage();
        void setDebugMessage();

        int connectPV(const std::string & PVName,const std::string & PYType );


      /// These are pure virtual methods, so need to have some implmentation in derived classes
        double get_CA_PEND_IO_TIMEOUT();
        void   set_CA_PEND_IO_TIMEOUT(double val );
        std::map< VELA_ENUM::ILOCK_NUMBER, VELA_ENUM::ILOCK_STATE >  getILockStates( const std::string & name );
        std::map< VELA_ENUM::ILOCK_NUMBER, std::string  >  getILockStatesStr( const std::string & name );

    protected:

    private:

        bool shouldShowDebugMessage, shouldShowMessage;


        const std::string createChannel;

        double CA_PEND_IO_TIMEOUT;


        //template <typename T>
        std::map<int, gmStructs::monitorStruct > pvMonitorMap;

        pvMonitorMapCount;

        //addToMonitorMap(const std::string & pvFullName,const std::string & pvType);
        bool getCHTYPE(const std::string & pvType, chtype & r);


};
/// FUNCTION OVERLOADING, if you have overloaded functions, or ones with default parameters
/// Create a load of different function pointers and use them in the bindings
/// !!! OR !!! You may be able to use this macro, BOOST_PYTHON_MEMBER_FUNCTION_OVERLOADS
/// http://www.boost.org/doc/libs/1_59_0/libs/python/doc/tutorial/doc/html/python/functions.html
/// I'm going to do it the function pointer way here...
/// The other alternative is to create lots of different function names in the c++ class
/// just to make the function pointer overloading neater, let's make some typedefs, generally i don't like doing this
typedef double doub;
typedef const double cdou;
typedef std::vector<double> vecd;
typedef std::vector<std::vector<double>> vvcd;
typedef const std::vector<double> cved;
typedef const size_t csiz;
typedef size_t size;
typedef std::vector<size_t> vsiz;
typedef std::string stri;
typedef const std::string cstr;
typedef std::vector<std::string> vecs;
typedef const std::vector<std::string> cves;
typedef std::vector<bool> vecb;
///
//bool(pilaserController::*screenIN_1)  (cstr& ) = &pilaserController::screenIN;

using namespace boost::python;
BOOST_PYTHON_MODULE( VELA_CLARA_General_Monitor )
{
    /// Things that you want to use in python muct be exposed:
    /// containers
    class_<std::vector< std::string > >("std_vector_string")
            .def( vector_indexing_suite< std::vector< std::string >>() )
            ;
    class_<std::vector< double> >("std_vector_double")
            .def( vector_indexing_suite< std::vector< double>>() )
            ;
    // Expose base classes
    boost::python::class_<baseObject, boost::noncopyable>("baseObject", boost::python::no_init)
        ;
    boost::python::class_<controller,boost::python::bases<baseObject>,boost::noncopyable>
        ("controller","controller Doc String", boost::python::no_init) /// forces Python to not be able to construct (init) this object
        ;
    /// The main class that creates all the controller obejcts
        boost::python::class_<VCgeneralMonitor,boost::noncopyable> ("init")
        .def("setQuiet",         &VCgeneralMonitor::setQuiet )
        .def("setVerbose",       &VCgeneralMonitor::setVerbose )
        .def("setMessage",       &VCgeneralMonitor::setMessage )
        .def("setDebugMessage",  &VCgeneralMonitor::setDebugMessage )
        .def("get_CA_PEND_IO_TIMEOUT", boost::python::pure_virtual(&controller::get_CA_PEND_IO_TIMEOUT) )
        .def("set_CA_PEND_IO_TIMEOUT", boost::python::pure_virtual(&controller::set_CA_PEND_IO_TIMEOUT) )
        ;
}

#endif // _VCgeneralMonitor_H
